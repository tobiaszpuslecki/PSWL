# pip inttall scikit-imageimport numpy as npimport matplotlib.pyplot as pltfrom skimage import datafig, ax = plt.subplots(8,2,figsize=(30,30))image = data.chelsea()image_shape = image.shapenoise_image = image_shape + (1000,)noise = np.random.uniform(-512, 512, noise_image)noised_image = noise + image[:,:,:, np.newaxis]denoized_image = np.mean(noised_image, axis=-1).astype(int)# plt.imshow(denoized_image, vmin=0,vmax=255)# plt.show()image_red = image[:,:,0]translation_identity = np.linspace(0,255,256)image_red_identity = translation_identity[image_red]ax[0][0].imshow(image_red_identity, cmap='Reds_r', vmin=0,vmax=255)ax[0][1].plot(translation_identity)translation_reverse = np.linspace(255,0,256)image_red_reversed = translation_reverse[image_red]ax[1][0].imshow(image_red_reversed, cmap='Reds_r', vmin=0,vmax=255)ax[1][1].plot(translation_reverse)translation_treshold = np.concatenate([np.linspace(0,0,100), np.linspace(255,255,100), np.linspace(0,0,56)])image_red_treshold = translation_treshold[image_red]ax[2][0].imshow(image_red_treshold, cmap='Reds_r', vmin=0,vmax=255)ax[2][1].plot(translation_treshold)alpha = 1translation_sinus = ((np.sin(np.linspace(0, 2*alpha*np.pi, 255)) + 1) / 2)*255image_red_sinus = translation_sinus[image_red]ax[3][0].imshow(image_red_sinus, cmap='Reds_r', vmin=0,vmax=255)ax[3][1].plot(translation_sinus)alpha = 2translation_sinus = ((np.sin(np.linspace(0, 2*alpha*np.pi, 255)) + 1) / 2)*255image_red_sinus = translation_sinus[image_red]ax[4][0].imshow(image_red_sinus, cmap='Reds_r', vmin=0,vmax=255)ax[4][1].plot(translation_sinus)alpha = 3translation_sinus = ((np.sin(np.linspace(0, 2*alpha*np.pi, 255)) + 1) / 2)*255image_red_sinus = translation_sinus[image_red]ax[5][0].imshow(image_red_sinus, cmap='Reds_r', vmin=0,vmax=255)ax[5][1].plot(translation_sinus)gamma = 1/3translation_gamma = np.clip( np.rint(((translation_identity/255)**gamma)*255), 0, 255)image_red_gamma = translation_gamma[image_red]ax[6][0].imshow(image_red_gamma, cmap='Reds_r', vmin=0,vmax=255)ax[6][1].plot(translation_gamma)gamma = 3translation_gamma = np.clip( np.rint(((translation_identity/255)**gamma)*255), 0, 255)image_red_gamma = translation_gamma[image_red]ax[7][0].imshow(image_red_gamma, cmap='Reds_r', vmin=0,vmax=255)ax[7][1].plot(translation_gamma)plt.show()